@using SwitchCommander.Blazor.Services
@using System.Net.NetworkInformation
@inherits LayoutComponentBase

<PageTitle>SwitchCommander.Blazor</PageTitle>
<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @if (!_isApiValid)
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Web Api is currently not avalibe</MudAlert>
            }
            else
            {
                <MudAlert @bind="_isShow" Severity="Severity.Success" Variant="Variant.Filled">Web Api is now online</MudAlert>
            }
            @Body
        </article>
    </main>
</div>

<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet"/>
<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet"/>

@code
{
    private bool _isApiValid;
    private bool _isShow;
    
    protected override async Task OnInitializedAsync()
    {
        await CheckIsApiOnline();
    }

    private async Task CheckIsApiOnline()
    {
        await Task.Run(async () =>
        {
            while (true)
            {
                var client = new System.Net.Sockets.TcpClient();
                try
                {
                    await client.ConnectAsync("localhost", 44317);
                    if (client.Connected)
                    {
                        _isApiValid = true;
                    }
                }
                catch (System.Net.Sockets.SocketException)
                {
                    _isApiValid = false;
                }
                finally
                {
                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(1000);
                    client.Close();
                    
                    if (_isApiValid)
                    {
                        await Task.Delay(5000); // Delay for 5 seconds
                        _isShow = false; // Set the is variable to false to hide the alert
                    }
                }
            }
        });
    }
}