@page "/dashboard"

<PageTitle>Switch</PageTitle>

<h1>Switch</h1>

<h3>Switch Port Grid</h3>

<button class="btn btn-primary" @onclick="GenerateGrid">Generate Grid</button>
<input name="Lane Size:" type="number" value="@localLaneSize" onchange="@LaneSize = @localLaneSize"/>
<input name="Port Size:" type="number" value="@localPortSize" onchange="@PortSize = @localPortSize"/>


@if (SwitchPorts != null)
{
    <table class="table table-bordered" DataSource="@SwitchPorts">
        <thead>
        <tr>
            <th>Lane</th>
            <th>Port Number</th>
            <th>Switch Port</th>
        </tr>
        </thead>
        <tbody>
        @for (var lane = 0; lane < LaneSize; lane++)
        {
            var range = 0;
            @for (int port = 0; port < PortSize; port++)
            {
                range = PortSize / LaneSize;
            }
            <tr>
                <td>@lane</td>
                @for (int i = 0; i <= range; i++)
                {
                    <td>@i</td>
                    <td>
                        <input type="checkbox"/>
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private int localLaneSize { get; set; } = 3;
    private int localPortSize { get; set; } = 24;
    
    private int LaneSize { get; set; } = 3;
    private int PortSize { get; set; } = 24;

    private List<bool> SwitchPorts { get; set; }

    protected override Task OnInitializedAsync()
    {
        SwitchPorts = new List<bool>();
        return base.OnInitializedAsync();
    }

    private void GenerateGrid()
    {
        for (int i = 0; i <= 49; i++)
        {
            SwitchPorts.Add(false);
            InvokeAsync(StateHasChanged);
        }
    }

}