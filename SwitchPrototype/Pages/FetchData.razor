@page "/fetchdata"
@using SwitchPrototype.Models
@using SwitchPrototype.Services
@inject WeatherForecastService ForecastService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
    <h2>Ping Result: @_resultOfPing</h2>
}

@code {
    private WeatherForecast[]? forecasts;

    private PingService _pingService = new();
    protected bool _resultOfPing;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
        await Task.Run(async () =>
        {
            while (true)
            {
                await Task.Delay(2000);
                _resultOfPing = !_resultOfPing;
                await InvokeAsync(StateHasChanged);
            }
        });
        
    }
    
    
}